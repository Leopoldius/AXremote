# 1 "..\\COMMON\\misc.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "..\\COMMON\\misc.c"
# 30 "..\\COMMON\\misc.c"
# 1 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/ax8052.h" 1
# 34 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/ax8052.h"
# 1 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/axcompiler.h" 1
# 35 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/ax8052.h" 2



__sfr __at(0xE0) ACC ;
__sbit __at(0xE0 +0) ACC_0 ;
__sbit __at(0xE0 +1) ACC_1 ;
__sbit __at(0xE0 +2) ACC_2 ;
__sbit __at(0xE0 +3) ACC_3 ;
__sbit __at(0xE0 +4) ACC_4 ;
__sbit __at(0xE0 +5) ACC_5 ;
__sbit __at(0xE0 +6) ACC_6 ;
__sbit __at(0xE0 +7) ACC_7 ;
__sfr __at(0xF0) B ;
__sbit __at(0xF0 +0) B_0 ;
__sbit __at(0xF0 +1) B_1 ;
__sbit __at(0xF0 +2) B_2 ;
__sbit __at(0xF0 +3) B_3 ;
__sbit __at(0xF0 +4) B_4 ;
__sbit __at(0xF0 +5) B_5 ;
__sbit __at(0xF0 +6) B_6 ;
__sbit __at(0xF0 +7) B_7 ;
__sfr __at(0x83) DPH ;
__sfr __at(0x85) DPH1 ;
__sfr __at(0x82) DPL ;
__sfr __at(0x84) DPL1 ;
__sfr16 __at(((0x82 +1U)<<8) | 0x82) DPTR0 ;
__sfr16 __at(((0x84 +1U)<<8) | 0x84) DPTR1 ;
__sfr __at(0x86) DPS ;
__sfr __at(0xA0) E2IE ;
__sbit __at(0xA0 +0) E2IE_0 ;
__sbit __at(0xA0 +1) E2IE_1 ;
__sbit __at(0xA0 +2) E2IE_2 ;
__sbit __at(0xA0 +3) E2IE_3 ;
__sbit __at(0xA0 +4) E2IE_4 ;
__sbit __at(0xA0 +5) E2IE_5 ;
__sbit __at(0xA0 +6) E2IE_6 ;
__sbit __at(0xA0 +7) E2IE_7 ;
__sfr __at(0xC0) E2IP ;
__sbit __at(0xC0 +0) E2IP_0 ;
__sbit __at(0xC0 +1) E2IP_1 ;
__sbit __at(0xC0 +2) E2IP_2 ;
__sbit __at(0xC0 +3) E2IP_3 ;
__sbit __at(0xC0 +4) E2IP_4 ;
__sbit __at(0xC0 +5) E2IP_5 ;
__sbit __at(0xC0 +6) E2IP_6 ;
__sbit __at(0xC0 +7) E2IP_7 ;
__sfr __at(0x98) EIE ;
__sbit __at(0x98 +0) EIE_0 ;
__sbit __at(0x98 +1) EIE_1 ;
__sbit __at(0x98 +2) EIE_2 ;
__sbit __at(0x98 +3) EIE_3 ;
__sbit __at(0x98 +4) EIE_4 ;
__sbit __at(0x98 +5) EIE_5 ;
__sbit __at(0x98 +6) EIE_6 ;
__sbit __at(0x98 +7) EIE_7 ;
__sfr __at(0xB0) EIP ;
__sbit __at(0xB0 +0) EIP_0 ;
__sbit __at(0xB0 +1) EIP_1 ;
__sbit __at(0xB0 +2) EIP_2 ;
__sbit __at(0xB0 +3) EIP_3 ;
__sbit __at(0xB0 +4) EIP_4 ;
__sbit __at(0xB0 +5) EIP_5 ;
__sbit __at(0xB0 +6) EIP_6 ;
__sbit __at(0xB0 +7) EIP_7 ;
__sfr __at(0xA8) IE ;
__sbit __at(0xA8 +0) IE_0 ;
__sbit __at(0xA8 +1) IE_1 ;
__sbit __at(0xA8 +2) IE_2 ;
__sbit __at(0xA8 +3) IE_3 ;
__sbit __at(0xA8 +4) IE_4 ;
__sbit __at(0xA8 +5) IE_5 ;
__sbit __at(0xA8 +6) IE_6 ;
__sbit __at(0xA8 +7) IE_7 ;
__sbit __at(0xA8 +7) EA ;
__sfr __at(0xB8) IP ;
__sbit __at(0xB8 +0) IP_0 ;
__sbit __at(0xB8 +1) IP_1 ;
__sbit __at(0xB8 +2) IP_2 ;
__sbit __at(0xB8 +3) IP_3 ;
__sbit __at(0xB8 +4) IP_4 ;
__sbit __at(0xB8 +5) IP_5 ;
__sbit __at(0xB8 +6) IP_6 ;
__sbit __at(0xB8 +7) IP_7 ;
__sfr __at(0x87) PCON ;
__sfr __at(0xD0) PSW ;
__sbit __at(0xD0 +0) P ;
__sbit __at(0xD0 +1) F1 ;
__sbit __at(0xD0 +2) OV ;
__sbit __at(0xD0 +3) RS0 ;
__sbit __at(0xD0 +4) RS1 ;
__sbit __at(0xD0 +5) F0 ;
__sbit __at(0xD0 +6) AC ;
__sbit __at(0xD0 +7) CY ;
__sfr __at(0x81) SP ;
__sfr __at(0xD9) XPAGE ;
__sfr __at(0xD9) _XPAGE ;
__sfr __at(0xCA) ADCCH0CONFIG ;
__sfr __at(0xCB) ADCCH1CONFIG ;
__sfr __at(0xD2) ADCCH2CONFIG ;
__sfr __at(0xD3) ADCCH3CONFIG ;
__sfr __at(0xD1) ADCCLKSRC ;
__sfr __at(0xC9) ADCCONV ;
__sfr __at(0xE1) ANALOGCOMP ;
__sfr __at(0xC6) CLKCON ;
__sfr __at(0xC7) CLKSTAT ;
__sfr __at(0x97) CODECONFIG ;
__sfr __at(0xE3) DBGLNKBUF ;
__sfr __at(0xE2) DBGLNKSTAT ;
__sfr __at(0x89) DIRA ;
__sfr __at(0x8A) DIRB ;
__sfr __at(0x8B) DIRC ;
__sfr __at(0x8E) DIRR ;
__sfr __at(0xC8) PINA ;
__sbit __at(0xC8 +0) PINA_0 ;
__sbit __at(0xC8 +1) PINA_1 ;
__sbit __at(0xC8 +2) PINA_2 ;
__sbit __at(0xC8 +3) PINA_3 ;
__sbit __at(0xC8 +4) PINA_4 ;
__sbit __at(0xC8 +5) PINA_5 ;
__sbit __at(0xC8 +6) PINA_6 ;
__sbit __at(0xC8 +7) PINA_7 ;
__sfr __at(0xE8) PINB ;
__sbit __at(0xE8 +0) PINB_0 ;
__sbit __at(0xE8 +1) PINB_1 ;
__sbit __at(0xE8 +2) PINB_2 ;
__sbit __at(0xE8 +3) PINB_3 ;
__sbit __at(0xE8 +4) PINB_4 ;
__sbit __at(0xE8 +5) PINB_5 ;
__sbit __at(0xE8 +6) PINB_6 ;
__sbit __at(0xE8 +7) PINB_7 ;
__sfr __at(0xF8) PINC ;
__sbit __at(0xF8 +0) PINC_0 ;
__sbit __at(0xF8 +1) PINC_1 ;
__sbit __at(0xF8 +2) PINC_2 ;
__sbit __at(0xF8 +3) PINC_3 ;
__sbit __at(0xF8 +4) PINC_4 ;
__sbit __at(0xF8 +5) PINC_5 ;
__sbit __at(0xF8 +6) PINC_6 ;
__sbit __at(0xF8 +7) PINC_7 ;
__sfr __at(0x8D) PINR ;
__sfr __at(0x80) PORTA ;
__sbit __at(0x80 +0) PORTA_0 ;
__sbit __at(0x80 +1) PORTA_1 ;
__sbit __at(0x80 +2) PORTA_2 ;
__sbit __at(0x80 +3) PORTA_3 ;
__sbit __at(0x80 +4) PORTA_4 ;
__sbit __at(0x80 +5) PORTA_5 ;
__sbit __at(0x80 +6) PORTA_6 ;
__sbit __at(0x80 +7) PORTA_7 ;
__sfr __at(0x88) PORTB ;
__sbit __at(0x88 +0) PORTB_0 ;
__sbit __at(0x88 +1) PORTB_1 ;
__sbit __at(0x88 +2) PORTB_2 ;
__sbit __at(0x88 +3) PORTB_3 ;
__sbit __at(0x88 +4) PORTB_4 ;
__sbit __at(0x88 +5) PORTB_5 ;
__sbit __at(0x88 +6) PORTB_6 ;
__sbit __at(0x88 +7) PORTB_7 ;
__sfr __at(0x90) PORTC ;
__sbit __at(0x90 +0) PORTC_0 ;
__sbit __at(0x90 +1) PORTC_1 ;
__sbit __at(0x90 +2) PORTC_2 ;
__sbit __at(0x90 +3) PORTC_3 ;
__sbit __at(0x90 +4) PORTC_4 ;
__sbit __at(0x90 +5) PORTC_5 ;
__sbit __at(0x90 +6) PORTC_6 ;
__sbit __at(0x90 +7) PORTC_7 ;
__sfr __at(0x8C) PORTR ;
__sfr __at(0xCE) IC0CAPT0 ;
__sfr __at(0xCF) IC0CAPT1 ;
__sfr16 __at(((0xCE +1U)<<8) | 0xCE) IC0CAPT ;
__sfr __at(0xCC) IC0MODE ;
__sfr __at(0xCD) IC0STATUS ;
__sfr __at(0xD6) IC1CAPT0 ;
__sfr __at(0xD7) IC1CAPT1 ;
__sfr16 __at(((0xD6 +1U)<<8) | 0xD6) IC1CAPT ;
__sfr __at(0xD4) IC1MODE ;
__sfr __at(0xD5) IC1STATUS ;
__sfr __at(0x92) NVADDR0 ;
__sfr __at(0x93) NVADDR1 ;
__sfr16 __at(((0x92 +1U)<<8) | 0x92) NVADDR ;
__sfr __at(0x94) NVDATA0 ;
__sfr __at(0x95) NVDATA1 ;
__sfr16 __at(((0x94 +1U)<<8) | 0x94) NVDATA ;
__sfr __at(0x96) NVKEY ;
__sfr __at(0x91) NVSTATUS ;
__sfr __at(0xBC) OC0COMP0 ;
__sfr __at(0xBD) OC0COMP1 ;
__sfr16 __at(((0xBC +1U)<<8) | 0xBC) OC0COMP ;
__sfr __at(0xB9) OC0MODE ;
__sfr __at(0xBA) OC0PIN ;
__sfr __at(0xBB) OC0STATUS ;
__sfr __at(0xC4) OC1COMP0 ;
__sfr __at(0xC5) OC1COMP1 ;
__sfr16 __at(((0xC4 +1U)<<8) | 0xC4) OC1COMP ;
__sfr __at(0xC1) OC1MODE ;
__sfr __at(0xC2) OC1PIN ;
__sfr __at(0xC3) OC1STATUS ;
__sfr __at(0xB1) RADIOACC ;
__sfr __at(0xB3) RADIOADDR0 ;
__sfr __at(0xB2) RADIOADDR1 ;
__sfr16 __at(0xB2B3) RADIOADDR ;
__sfr __at(0xB7) RADIODATA0 ;
__sfr __at(0xB6) RADIODATA1 ;
__sfr __at(0xB5) RADIODATA2 ;
__sfr __at(0xB4) RADIODATA3 ;
__sfr32 __at(0xB4B5B6B7) RADIODATA ;
__sfr __at(0xBE) RADIOSTAT0 ;
__sfr __at(0xBF) RADIOSTAT1 ;
__sfr16 __at(((0xBE +1U)<<8) | 0xBE) RADIOSTAT ;
__sfr __at(0xDF) SPCLKSRC ;
__sfr __at(0xDC) SPMODE ;
__sfr __at(0xDE) SPSHREG ;
__sfr __at(0xDD) SPSTATUS ;
__sfr __at(0x9A) T0CLKSRC ;
__sfr __at(0x9C) T0CNT0 ;
__sfr __at(0x9D) T0CNT1 ;
__sfr16 __at(((0x9C +1U)<<8) | 0x9C) T0CNT ;
__sfr __at(0x99) T0MODE ;
__sfr __at(0x9E) T0PERIOD0 ;
__sfr __at(0x9F) T0PERIOD1 ;
__sfr16 __at(((0x9E +1U)<<8) | 0x9E) T0PERIOD ;
__sfr __at(0x9B) T0STATUS ;
__sfr __at(0xA2) T1CLKSRC ;
__sfr __at(0xA4) T1CNT0 ;
__sfr __at(0xA5) T1CNT1 ;
__sfr16 __at(((0xA4 +1U)<<8) | 0xA4) T1CNT ;
__sfr __at(0xA1) T1MODE ;
__sfr __at(0xA6) T1PERIOD0 ;
__sfr __at(0xA7) T1PERIOD1 ;
__sfr16 __at(((0xA6 +1U)<<8) | 0xA6) T1PERIOD ;
__sfr __at(0xA3) T1STATUS ;
__sfr __at(0xAA) T2CLKSRC ;
__sfr __at(0xAC) T2CNT0 ;
__sfr __at(0xAD) T2CNT1 ;
__sfr16 __at(((0xAC +1U)<<8) | 0xAC) T2CNT ;
__sfr __at(0xA9) T2MODE ;
__sfr __at(0xAE) T2PERIOD0 ;
__sfr __at(0xAF) T2PERIOD1 ;
__sfr16 __at(((0xAE +1U)<<8) | 0xAE) T2PERIOD ;
__sfr __at(0xAB) T2STATUS ;
__sfr __at(0xE4) U0CTRL ;
__sfr __at(0xE7) U0MODE ;
__sfr __at(0xE6) U0SHREG ;
__sfr __at(0xE5) U0STATUS ;
__sfr __at(0xEC) U1CTRL ;
__sfr __at(0xEF) U1MODE ;
__sfr __at(0xEE) U1SHREG ;
__sfr __at(0xED) U1STATUS ;
__sfr __at(0xDA) WDTCFG ;
__sfr __at(0xDB) WDTRESET ;
__sfr __at(0xF1) WTCFGA ;
__sfr __at(0xF9) WTCFGB ;
__sfr __at(0xF2) WTCNTA0 ;
__sfr __at(0xF3) WTCNTA1 ;
__sfr16 __at(((0xF2 +1U)<<8) | 0xF2) WTCNTA ;
__sfr __at(0xFA) WTCNTB0 ;
__sfr __at(0xFB) WTCNTB1 ;
__sfr16 __at(((0xFA +1U)<<8) | 0xFA) WTCNTB ;
__sfr __at(0xEB) WTCNTR1 ;
__sfr __at(0xF4) WTEVTA0 ;
__sfr __at(0xF5) WTEVTA1 ;
__sfr16 __at(((0xF4 +1U)<<8) | 0xF4) WTEVTA ;
__sfr __at(0xF6) WTEVTB0 ;
__sfr __at(0xF7) WTEVTB1 ;
__sfr16 __at(((0xF6 +1U)<<8) | 0xF6) WTEVTB ;
__sfr __at(0xFC) WTEVTC0 ;
__sfr __at(0xFD) WTEVTC1 ;
__sfr16 __at(((0xFC +1U)<<8) | 0xFC) WTEVTC ;
__sfr __at(0xFE) WTEVTD0 ;
__sfr __at(0xFF) WTEVTD1 ;
__sfr16 __at(((0xFE +1U)<<8) | 0xFE) WTEVTD ;
__sfr __at(0xE9) WTIRQEN ;
__sfr __at(0xEA) WTSTAT ;






__xdata volatile unsigned char __at(0x7020) ADCCH0VAL0 ;
__xdata volatile unsigned char __at(0x7021) ADCCH0VAL1 ;
__xdata volatile unsigned short __at(0x7020) ADCCH0VAL ;
__xdata volatile unsigned char __at(0x7022) ADCCH1VAL0 ;
__xdata volatile unsigned char __at(0x7023) ADCCH1VAL1 ;
__xdata volatile unsigned short __at(0x7022) ADCCH1VAL ;
__xdata volatile unsigned char __at(0x7024) ADCCH2VAL0 ;
__xdata volatile unsigned char __at(0x7025) ADCCH2VAL1 ;
__xdata volatile unsigned short __at(0x7024) ADCCH2VAL ;
__xdata volatile unsigned char __at(0x7026) ADCCH3VAL0 ;
__xdata volatile unsigned char __at(0x7027) ADCCH3VAL1 ;
__xdata volatile unsigned short __at(0x7026) ADCCH3VAL ;
__xdata volatile unsigned char __at(0x7028) ADCTUNE0 ;
__xdata volatile unsigned char __at(0x7029) ADCTUNE1 ;
__xdata volatile unsigned char __at(0x702A) ADCTUNE2 ;
__xdata volatile unsigned char __at(0x7010) DMA0ADDR0 ;
__xdata volatile unsigned char __at(0x7011) DMA0ADDR1 ;
__xdata volatile unsigned short __at(0x7010) DMA0ADDR ;
__xdata volatile unsigned char __at(0x7014) DMA0CONFIG ;
__xdata volatile unsigned char __at(0x7012) DMA1ADDR0 ;
__xdata volatile unsigned char __at(0x7013) DMA1ADDR1 ;
__xdata volatile unsigned short __at(0x7012) DMA1ADDR ;
__xdata volatile unsigned char __at(0x7015) DMA1CONFIG ;
__xdata volatile unsigned char __at(0x7070) FRCOSCCONFIG ;
__xdata volatile unsigned char __at(0x7071) FRCOSCCTRL ;
__xdata volatile unsigned char __at(0x7076) FRCOSCFREQ0 ;
__xdata volatile unsigned char __at(0x7077) FRCOSCFREQ1 ;
__xdata volatile unsigned short __at(0x7076) FRCOSCFREQ ;
__xdata volatile unsigned char __at(0x7072) FRCOSCKFILT0 ;
__xdata volatile unsigned char __at(0x7073) FRCOSCKFILT1 ;
__xdata volatile unsigned short __at(0x7072) FRCOSCKFILT ;
__xdata volatile unsigned char __at(0x7078) FRCOSCPER0 ;
__xdata volatile unsigned char __at(0x7079) FRCOSCPER1 ;
__xdata volatile unsigned short __at(0x7078) FRCOSCPER ;
__xdata volatile unsigned char __at(0x7074) FRCOSCREF0 ;
__xdata volatile unsigned char __at(0x7075) FRCOSCREF1 ;
__xdata volatile unsigned short __at(0x7074) FRCOSCREF ;
__xdata volatile unsigned char __at(0x7007) ANALOGA ;
__xdata volatile unsigned char __at(0x700C) GPIOENABLE ;
__xdata volatile unsigned char __at(0x7003) EXTIRQ ;
__xdata volatile unsigned char __at(0x7000) INTCHGA ;
__xdata volatile unsigned char __at(0x7001) INTCHGB ;
__xdata volatile unsigned char __at(0x7002) INTCHGC ;
__xdata volatile unsigned char __at(0x7008) PALTA ;
__xdata volatile unsigned char __at(0x7009) PALTB ;
__xdata volatile unsigned char __at(0x700A) PALTC ;
__xdata volatile unsigned char __at(0x7004) PINCHGA ;
__xdata volatile unsigned char __at(0x7005) PINCHGB ;
__xdata volatile unsigned char __at(0x7006) PINCHGC ;
__xdata volatile unsigned char __at(0x700B) PINSEL ;
__xdata volatile unsigned char __at(0x7060) LPOSCCONFIG ;
__xdata volatile unsigned char __at(0x7066) LPOSCFREQ0 ;
__xdata volatile unsigned char __at(0x7067) LPOSCFREQ1 ;
__xdata volatile unsigned short __at(0x7066) LPOSCFREQ ;
__xdata volatile unsigned char __at(0x7062) LPOSCKFILT0 ;
__xdata volatile unsigned char __at(0x7063) LPOSCKFILT1 ;
__xdata volatile unsigned short __at(0x7062) LPOSCKFILT ;
__xdata volatile unsigned char __at(0x7068) LPOSCPER0 ;
__xdata volatile unsigned char __at(0x7069) LPOSCPER1 ;
__xdata volatile unsigned short __at(0x7068) LPOSCPER ;
__xdata volatile unsigned char __at(0x7064) LPOSCREF0 ;
__xdata volatile unsigned char __at(0x7065) LPOSCREF1 ;
__xdata volatile unsigned short __at(0x7064) LPOSCREF ;
__xdata volatile unsigned char __at(0x7054) LPXOSCGM ;
__xdata volatile unsigned char __at(0x7F01) MISCCTRL ;
__xdata volatile unsigned char __at(0x7053) OSCCALIB ;
__xdata volatile unsigned char __at(0x7050) OSCFORCERUN ;
__xdata volatile unsigned char __at(0x7052) OSCREADY ;
__xdata volatile unsigned char __at(0x7051) OSCRUN ;
__xdata volatile unsigned char __at(0x7040) RADIOFDATAADDR0 ;
__xdata volatile unsigned char __at(0x7041) RADIOFDATAADDR1 ;
__xdata volatile unsigned short __at(0x7040) RADIOFDATAADDR ;
__xdata volatile unsigned char __at(0x7042) RADIOFSTATADDR0 ;
__xdata volatile unsigned char __at(0x7043) RADIOFSTATADDR1 ;
__xdata volatile unsigned short __at(0x7042) RADIOFSTATADDR ;
__xdata volatile unsigned char __at(0x7044) RADIOMUX ;
__xdata volatile unsigned char __at(0x7084) SCRATCH0 ;
__xdata volatile unsigned char __at(0x7085) SCRATCH1 ;
__xdata volatile unsigned char __at(0x7086) SCRATCH2 ;
__xdata volatile unsigned char __at(0x7087) SCRATCH3 ;
__xdata volatile unsigned char __at(0x7F00) SILICONREV ;
__xdata volatile unsigned char __at(0x7F19) XTALAMPL ;
__xdata volatile unsigned char __at(0x7F18) XTALOSC ;
__xdata volatile unsigned char __at(0x7F1A) XTALREADY ;



__xdata volatile unsigned short __at(0x3F82) XDPTR0 ;
__xdata volatile unsigned short __at(0x3F84) XDPTR1 ;
__xdata volatile unsigned char __at(0x3FA8) XIE ;
__xdata volatile unsigned char __at(0x3FB8) XIP ;
__xdata volatile unsigned char __at(0x3F87) XPCON ;
__xdata volatile unsigned char __at(0x3FCA) XADCCH0CONFIG ;
__xdata volatile unsigned char __at(0x3FCB) XADCCH1CONFIG ;
__xdata volatile unsigned char __at(0x3FD2) XADCCH2CONFIG ;
__xdata volatile unsigned char __at(0x3FD3) XADCCH3CONFIG ;
__xdata volatile unsigned char __at(0x3FD1) XADCCLKSRC ;
__xdata volatile unsigned char __at(0x3FC9) XADCCONV ;
__xdata volatile unsigned char __at(0x3FE1) XANALOGCOMP ;
__xdata volatile unsigned char __at(0x3FC6) XCLKCON ;
__xdata volatile unsigned char __at(0x3FC7) XCLKSTAT ;
__xdata volatile unsigned char __at(0x3F97) XCODECONFIG ;
__xdata volatile unsigned char __at(0x3FE3) XDBGLNKBUF ;
__xdata volatile unsigned char __at(0x3FE2) XDBGLNKSTAT ;
__xdata volatile unsigned char __at(0x3F89) XDIRA ;
__xdata volatile unsigned char __at(0x3F8A) XDIRB ;
__xdata volatile unsigned char __at(0x3F8B) XDIRC ;
__xdata volatile unsigned char __at(0x3F8E) XDIRR ;
__xdata volatile unsigned char __at(0x3FC8) XPINA ;
__xdata volatile unsigned char __at(0x3FE8) XPINB ;
__xdata volatile unsigned char __at(0x3FF8) XPINC ;
__xdata volatile unsigned char __at(0x3F8D) XPINR ;
__xdata volatile unsigned char __at(0x3F80) XPORTA ;
__xdata volatile unsigned char __at(0x3F88) XPORTB ;
__xdata volatile unsigned char __at(0x3F90) XPORTC ;
__xdata volatile unsigned char __at(0x3F8C) XPORTR ;
__xdata volatile unsigned char __at(0x3FCE) XIC0CAPT0 ;
__xdata volatile unsigned char __at(0x3FCF) XIC0CAPT1 ;
__xdata volatile unsigned short __at(0x3FCE) XIC0CAPT ;
__xdata volatile unsigned char __at(0x3FCC) XIC0MODE ;
__xdata volatile unsigned char __at(0x3FCD) XIC0STATUS ;
__xdata volatile unsigned char __at(0x3FD6) XIC1CAPT0 ;
__xdata volatile unsigned char __at(0x3FD7) XIC1CAPT1 ;
__xdata volatile unsigned short __at(0x3FD6) XIC1CAPT ;
__xdata volatile unsigned char __at(0x3FD4) XIC1MODE ;
__xdata volatile unsigned char __at(0x3FD5) XIC1STATUS ;
__xdata volatile unsigned char __at(0x3F92) XNVADDR0 ;
__xdata volatile unsigned char __at(0x3F93) XNVADDR1 ;
__xdata volatile unsigned short __at(0x3F92) XNVADDR ;
__xdata volatile unsigned char __at(0x3F94) XNVDATA0 ;
__xdata volatile unsigned char __at(0x3F95) XNVDATA1 ;
__xdata volatile unsigned short __at(0x3F94) XNVDATA ;
__xdata volatile unsigned char __at(0x3F96) XNVKEY ;
__xdata volatile unsigned char __at(0x3F91) XNVSTATUS ;
__xdata volatile unsigned char __at(0x3FBC) XOC0COMP0 ;
__xdata volatile unsigned char __at(0x3FBD) XOC0COMP1 ;
__xdata volatile unsigned short __at(0x3FBC) XOC0COMP ;
__xdata volatile unsigned char __at(0x3FB9) XOC0MODE ;
__xdata volatile unsigned char __at(0x3FBA) XOC0PIN ;
__xdata volatile unsigned char __at(0x3FBB) XOC0STATUS ;
__xdata volatile unsigned char __at(0x3FC4) XOC1COMP0 ;
__xdata volatile unsigned char __at(0x3FC5) XOC1COMP1 ;
__xdata volatile unsigned short __at(0x3FC4) XOC1COMP ;
__xdata volatile unsigned char __at(0x3FC1) XOC1MODE ;
__xdata volatile unsigned char __at(0x3FC2) XOC1PIN ;
__xdata volatile unsigned char __at(0x3FC3) XOC1STATUS ;
__xdata volatile unsigned char __at(0x3FB1) XRADIOACC ;
__xdata volatile unsigned char __at(0x3FB3) XRADIOADDR0 ;
__xdata volatile unsigned char __at(0x3FB2) XRADIOADDR1 ;
__xdata volatile unsigned char __at(0x3FB7) XRADIODATA0 ;
__xdata volatile unsigned char __at(0x3FB6) XRADIODATA1 ;
__xdata volatile unsigned char __at(0x3FB5) XRADIODATA2 ;
__xdata volatile unsigned char __at(0x3FB4) XRADIODATA3 ;
__xdata volatile unsigned char __at(0x3FBE) XRADIOSTAT0 ;
__xdata volatile unsigned char __at(0x3FBF) XRADIOSTAT1 ;
__xdata volatile unsigned short __at(0x3FBE) XRADIOSTAT ;
__xdata volatile unsigned char __at(0x3FDF) XSPCLKSRC ;
__xdata volatile unsigned char __at(0x3FDC) XSPMODE ;
__xdata volatile unsigned char __at(0x3FDE) XSPSHREG ;
__xdata volatile unsigned char __at(0x3FDD) XSPSTATUS ;
__xdata volatile unsigned char __at(0x3F9A) XT0CLKSRC ;
__xdata volatile unsigned char __at(0x3F9C) XT0CNT0 ;
__xdata volatile unsigned char __at(0x3F9D) XT0CNT1 ;
__xdata volatile unsigned short __at(0x3F9C) XT0CNT ;
__xdata volatile unsigned char __at(0x3F99) XT0MODE ;
__xdata volatile unsigned char __at(0x3F9E) XT0PERIOD0 ;
__xdata volatile unsigned char __at(0x3F9F) XT0PERIOD1 ;
__xdata volatile unsigned short __at(0x3F9E) XT0PERIOD ;
__xdata volatile unsigned char __at(0x3F9B) XT0STATUS ;
__xdata volatile unsigned char __at(0x3FA2) XT1CLKSRC ;
__xdata volatile unsigned char __at(0x3FA4) XT1CNT0 ;
__xdata volatile unsigned char __at(0x3FA5) XT1CNT1 ;
__xdata volatile unsigned short __at(0x3FA4) XT1CNT ;
__xdata volatile unsigned char __at(0x3FA1) XT1MODE ;
__xdata volatile unsigned char __at(0x3FA6) XT1PERIOD0 ;
__xdata volatile unsigned char __at(0x3FA7) XT1PERIOD1 ;
__xdata volatile unsigned short __at(0x3FA6) XT1PERIOD ;
__xdata volatile unsigned char __at(0x3FA3) XT1STATUS ;
__xdata volatile unsigned char __at(0x3FAA) XT2CLKSRC ;
__xdata volatile unsigned char __at(0x3FAC) XT2CNT0 ;
__xdata volatile unsigned char __at(0x3FAD) XT2CNT1 ;
__xdata volatile unsigned short __at(0x3FAC) XT2CNT ;
__xdata volatile unsigned char __at(0x3FA9) XT2MODE ;
__xdata volatile unsigned char __at(0x3FAE) XT2PERIOD0 ;
__xdata volatile unsigned char __at(0x3FAF) XT2PERIOD1 ;
__xdata volatile unsigned short __at(0x3FAE) XT2PERIOD ;
__xdata volatile unsigned char __at(0x3FAB) XT2STATUS ;
__xdata volatile unsigned char __at(0x3FE4) XU0CTRL ;
__xdata volatile unsigned char __at(0x3FE7) XU0MODE ;
__xdata volatile unsigned char __at(0x3FE6) XU0SHREG ;
__xdata volatile unsigned char __at(0x3FE5) XU0STATUS ;
__xdata volatile unsigned char __at(0x3FEC) XU1CTRL ;
__xdata volatile unsigned char __at(0x3FEF) XU1MODE ;
__xdata volatile unsigned char __at(0x3FEE) XU1SHREG ;
__xdata volatile unsigned char __at(0x3FED) XU1STATUS ;
__xdata volatile unsigned char __at(0x3FDA) XWDTCFG ;
__xdata volatile unsigned char __at(0x3FDB) XWDTRESET ;
__xdata volatile unsigned char __at(0x3FF1) XWTCFGA ;
__xdata volatile unsigned char __at(0x3FF9) XWTCFGB ;
__xdata volatile unsigned char __at(0x3FF2) XWTCNTA0 ;
__xdata volatile unsigned char __at(0x3FF3) XWTCNTA1 ;
__xdata volatile unsigned short __at(0x3FF2) XWTCNTA ;
__xdata volatile unsigned char __at(0x3FFA) XWTCNTB0 ;
__xdata volatile unsigned char __at(0x3FFB) XWTCNTB1 ;
__xdata volatile unsigned short __at(0x3FFA) XWTCNTB ;
__xdata volatile unsigned char __at(0x3FEB) XWTCNTR1 ;
__xdata volatile unsigned char __at(0x3FF4) XWTEVTA0 ;
__xdata volatile unsigned char __at(0x3FF5) XWTEVTA1 ;
__xdata volatile unsigned short __at(0x3FF4) XWTEVTA ;
__xdata volatile unsigned char __at(0x3FF6) XWTEVTB0 ;
__xdata volatile unsigned char __at(0x3FF7) XWTEVTB1 ;
__xdata volatile unsigned short __at(0x3FF6) XWTEVTB ;
__xdata volatile unsigned char __at(0x3FFC) XWTEVTC0 ;
__xdata volatile unsigned char __at(0x3FFD) XWTEVTC1 ;
__xdata volatile unsigned short __at(0x3FFC) XWTEVTC ;
__xdata volatile unsigned char __at(0x3FFE) XWTEVTD0 ;
__xdata volatile unsigned char __at(0x3FFF) XWTEVTD1 ;
__xdata volatile unsigned short __at(0x3FFE) XWTEVTD ;
__xdata volatile unsigned char __at(0x3FE9) XWTIRQEN ;
__xdata volatile unsigned char __at(0x3FEA) XWTSTAT ;
# 31 "..\\COMMON\\misc.c" 2
# 1 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmftypes.h" 1
# 54 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmftypes.h"
typedef signed char int8_t;
typedef signed int int16_t;
typedef signed long int32_t;
typedef unsigned char uint8_t;
typedef unsigned int uint16_t;
typedef unsigned long uint32_t;




extern void delay(uint16_t us) __reentrant __naked;




extern uint16_t __data random_seed;
extern uint16_t random(void);





#pragma callee_saves hweight8,hweight16,hweight32
#pragma callee_saves signextend12,signextend16,signextend20,signextend24
extern int32_t signextend12(int16_t x) __reentrant __naked;
extern int32_t signextend16(int16_t x) __reentrant __naked;
extern int32_t signextend20(int32_t x) __reentrant __naked;
extern int32_t signextend24(int32_t x) __reentrant __naked;






extern uint8_t hweight8(uint8_t x) __reentrant;
extern uint8_t hweight16(uint16_t x) __reentrant;
extern uint8_t hweight32(uint32_t x) __reentrant;




#pragma callee_saves signedlimit16,checksignedlimit16,signedlimit32,checksignedlimit32
extern int16_t signedlimit16(int16_t x, int16_t lim) __reentrant __naked;
extern uint8_t checksignedlimit16(int16_t x, int16_t lim) __reentrant __naked;
extern int32_t signedlimit32(int32_t x, int32_t lim) __reentrant __naked;
extern uint8_t checksignedlimit32(int32_t x, int32_t lim) __reentrant __naked;
# 111 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmftypes.h"
extern uint8_t rev8(uint8_t x) __reentrant;
# 126 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmftypes.h"
#pragma callee_saves wtimer_standby,enter_standby,enter_sleep,enter_deepsleep

extern void wtimer_standby(void) __reentrant;
extern void enter_standby(void) __reentrant;
extern void enter_sleep(void) __reentrant;

extern void enter_sleep_cont(void) __reentrant;

extern void enter_deepsleep(void) __reentrant;
extern void reset_cpu(void) __reentrant;
extern void turn_off_xosc(void) __reentrant;
extern void turn_off_lpxosc(void) __reentrant;
# 32 "..\\COMMON\\misc.c" 2
# 1 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmfwtimer.h" 1



# 1 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmftypes.h" 1
# 5 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmfwtimer.h" 2

struct wtimer_callback {


 struct wtimer_callback __xdata *next;
        void (*handler)(struct wtimer_callback __xdata *desc);
};

struct wtimer_desc {

 struct wtimer_desc __xdata *next;
        void (*handler)(struct wtimer_desc __xdata *desc);
 uint32_t time;
};
# 27 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmfwtimer.h"
extern void wtimer0_setconfig(uint8_t cfg) __reentrant;
extern void wtimer1_setconfig(uint8_t cfg) __reentrant;
# 42 "C://Program Files (x86)//AXSEM//AXSDB//libmf//include/libmfwtimer.h"
extern void wtimer_init(void) __reentrant;
extern uint8_t wtimer_idle(uint8_t flags) __reentrant;





extern uint8_t wtimer_runcallbacks(void) __reentrant;


extern uint32_t wtimer0_curtime(void) __reentrant;
extern uint32_t wtimer1_curtime(void) __reentrant;
extern void wtimer0_addabsolute(struct wtimer_desc __xdata *desc) __reentrant;
extern void wtimer1_addabsolute(struct wtimer_desc __xdata *desc) __reentrant;
extern void wtimer0_addrelative(struct wtimer_desc __xdata *desc) __reentrant;
extern void wtimer1_addrelative(struct wtimer_desc __xdata *desc) __reentrant;
extern uint8_t wtimer_remove(struct wtimer_desc __xdata *desc) __reentrant;
extern uint8_t wtimer0_remove(struct wtimer_desc __xdata *desc) __reentrant;
extern uint8_t wtimer1_remove(struct wtimer_desc __xdata *desc) __reentrant;

extern void wtimer_add_callback(struct wtimer_callback __xdata *desc) __reentrant;
extern uint8_t wtimer_remove_callback(struct wtimer_callback __xdata *desc) __reentrant;

extern uint8_t wtimer_cansleep(void) __reentrant;


extern void wtimer_irq(void) __interrupt(1);
# 33 "..\\COMMON\\misc.c" 2
# 1 "C://Program Files (x86)//AXSEM//AXSDB//libaxdvk2//include/libaxlcd2.h" 1
# 47 "C://Program Files (x86)//AXSEM//AXSDB//libaxdvk2//include/libaxlcd2.h"
#pragma callee_saves lcd2_txbufptr,lcd2_txfreelinear
#pragma callee_saves lcd2_txfree,lcd2_txbuffersize,lcd2_wait_txfree,lcd2_txpokecmd,lcd2_txpoke,lcd2_txpokehex
#pragma callee_saves lcd2_init,lcd2_poll,lcd2_wait_txfree,lcd2_tx,lcd2_txcmdshort,lcd2_txcmdlong
extern void lcd2_irq(void) __interrupt(10) __naked;






extern uint8_t lcd2_poll(void) __reentrant __naked;
extern uint8_t __xdata *lcd2_txbufptr(uint8_t idx) __reentrant __naked;
extern uint8_t lcd2_txfreelinear(void) __reentrant __naked;
extern uint8_t lcd2_txidle(void) __reentrant __naked;
extern uint8_t lcd2_txfree(void) __reentrant __naked;
extern uint8_t lcd2_txbuffersize(void) __reentrant __naked;
extern void lcd2_txpokecmd(uint8_t idx, uint16_t cmd) __reentrant __naked;
extern void lcd2_txpoke(uint8_t idx, uint8_t ch) __reentrant __naked;
extern void lcd2_txpokehex(uint8_t idx, uint8_t ch) __reentrant __naked;
extern void lcd2_txadvance(uint8_t idx) __reentrant __naked;

extern void lcd2_init(void) __reentrant;
extern void lcd2_portinit(void) __reentrant;
extern void lcd2_wait_txdone(void) __reentrant;
extern void lcd2_wait_txfree(uint8_t v) __reentrant;
extern void lcd2_tx(uint8_t v) __reentrant;
extern void lcd2_txcmdshort(uint8_t v) __reentrant;
extern void lcd2_txcmdlong(uint8_t v) __reentrant;
extern void lcd2_setpos(uint8_t v) __reentrant;
extern void lcd2_cleardisplay(void) __reentrant;
extern void lcd2_clear(uint8_t pos, uint8_t len) __reentrant;
extern void lcd2_writestr(const char *ch) __reentrant;
extern uint8_t lcd2_writenum16(uint16_t val, uint8_t nrdig, uint8_t flags) __reentrant;
extern uint8_t lcd2_writehex16(uint16_t val, uint8_t nrdig, uint8_t flags) __reentrant;

extern uint8_t lcd2_writenum32(uint32_t val, uint8_t nrdig, uint8_t flags) __reentrant;
extern uint8_t lcd2_writehex32(uint32_t val, uint8_t nrdig, uint8_t flags) __reentrant;
# 34 "..\\COMMON\\misc.c" 2

# 1 "..\\COMMON\\/misc.h" 1
# 35 "..\\COMMON\\/misc.h"
# 1 "..\\COMMON\\/../COMMON/axradio.h" 1
# 79 "..\\COMMON\\/../COMMON/axradio.h"
struct axradio_address {
    uint8_t addr[4];
};

struct axradio_address_mask {
    uint8_t addr[4];
    uint8_t mask[4];
};

struct axradio_status {
    uint8_t status;
    uint8_t error;
    uint32_t time;

    union {

        struct axradio_status_receive {
            struct axradio_status_receive_phy {
                int16_t rssi;
                int32_t offset;
                int16_t timeoffset;
                int16_t period;
            } phy;
            struct axradio_status_receive_mac {
                uint8_t remoteaddr[4];
                uint8_t localaddr[4];
                const __xdata uint8_t *raw;
            } mac;
            const __xdata uint8_t *pktdata;
            uint16_t pktlen;
        } rx;


        struct axradio_status_channelstate {
            int16_t rssi;
            uint8_t busy;
        } cs;
    } u;
};

extern uint8_t axradio_init(void);
extern uint8_t axradio_cansleep(void) __reentrant;
extern uint8_t axradio_set_mode(uint8_t mode);
extern uint8_t axradio_get_mode(void);
extern uint8_t axradio_set_channel(uint8_t chnum);
extern uint8_t axradio_get_channel(void);
extern uint8_t axradio_get_pllrange(void);
extern uint8_t axradio_get_pllrange_tx(void);
extern void axradio_set_local_address(const struct axradio_address_mask *addr);
extern void axradio_get_local_address(struct axradio_address_mask *addr);
extern void axradio_set_default_remote_address(const struct axradio_address *addr);
extern void axradio_get_default_remote_address(struct axradio_address *addr);
extern uint8_t axradio_set_freqoffset(int32_t offs);
extern int32_t axradio_get_freqoffset(void);
extern int32_t axradio_conv_freq_tohz(int32_t f) __reentrant;
extern int32_t axradio_conv_freq_fromhz(int32_t f) __reentrant;
extern int32_t axradio_conv_timeinterval_totimer0(int32_t dt) __reentrant;
extern uint32_t axradio_conv_time_totimer0(uint32_t dt) __reentrant;
extern uint8_t axradio_transmit(const struct axradio_address *addr, const uint8_t *pkt, uint16_t pktlen);
extern void axradio_statuschange(struct axradio_status __xdata *st);
extern uint8_t axradio_agc_freeze(void);
extern uint8_t axradio_agc_thaw(void);

extern const uint8_t __code axradio_framing_maclen;
extern const uint8_t __code axradio_framing_addrlen;




extern void axradio_isr(void) __interrupt 4;
# 36 "..\\COMMON\\/misc.h" 2

extern void calibrate_lposc(void);
extern uint8_t display_received_packet(struct axradio_status __xdata *st);
extern void dbglink_received_packet(struct axradio_status __xdata *st);
extern void delay_ms(uint16_t ms) __reentrant;
extern void stop_with_error(uint8_t *str);
extern void display_radio_error(uint8_t err);
# 36 "..\\COMMON\\misc.c" 2
# 1 "..\\COMMON\\/../COMMON/axradio.h" 1
# 37 "..\\COMMON\\misc.c" 2

void stop_with_error(uint8_t *str)
{
 lcd2_setpos(0);
 lcd2_writestr(str);
 lcd2_wait_txdone();
 IE = EIE = E2IE = 0;
 enter_sleep();
}

void display_radio_error(uint8_t err)
{
    struct errtbl {
        uint8_t errcode;
        const char __code *msg;
    };
    static const struct errtbl __code errtbl[] = {
        { 0x01, "E: not supported" },
        { 0x02, "E: busy" },
        { 0x03, "E: timeout" },
        { 0x04, "E: invalid" },
        { 0x05, "E: no chip found" },
        { 0x06, "E: ranging" },
        { 0x07, "E: lock lost" },
        { 0x00, 0 }
    };
    const struct errtbl __code *p = errtbl;
    do {
        if (p->errcode == err) {
            lcd2_setpos(0);
            lcd2_writestr(p->msg);
            return;
        }
        ++p;
    } while (p->errcode != 0x00);
}

static struct wtimer_desc __xdata delaymstimer;

static void delayms_callback(struct wtimer_desc __xdata *desc)
{
    desc;
    delaymstimer.handler = 0;
}

 void delay_ms(uint16_t ms) __reentrant
{

    uint32_t x;
    wtimer_remove(&delaymstimer);
    x = ms;
    delaymstimer.time = ms >> 1;
    x <<= 3;
    delaymstimer.time -= x;
    x <<= 3;
    delaymstimer.time += x;
    x <<= 2;
    delaymstimer.time += x;
    delaymstimer.handler = delayms_callback;
    wtimer1_addrelative(&delaymstimer);
    do {
        wtimer_runcallbacks();
        wtimer_idle(0x02);
    } while (delaymstimer.handler);
}
